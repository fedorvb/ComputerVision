{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fully-Connected Neural Nets\n",
    "In the previous homework you implemented a fully-connected two-layer neural network on CIFAR-10. The implementation was simple but not very modular since the loss and gradient were computed in a single monolithic function. This is manageable for a simple two-layer network, but would become impractical as we move to bigger models. Ideally we want to build networks using a more modular design so that we can implement different layer types in isolation and then snap them together into models with different architectures.\n",
    "\n",
    "In this exercise we will implement fully-connected networks using a more modular approach. For each layer we will implement a `forward` and a `backward` function. The `forward` function will receive inputs, weights, and other parameters and will return both an output and a `cache` object storing data needed for the backward pass, like this:\n",
    "\n",
    "```python\n",
    "def layer_forward(x, w):\n",
    "  \"\"\" Receive inputs x and weights w \"\"\"\n",
    "  # Do some computations ...\n",
    "  z = # ... some intermediate value\n",
    "  # Do some more computations ...\n",
    "  out = # the output\n",
    "   \n",
    "  cache = (x, w, z, out) # Values we need to compute gradients\n",
    "   \n",
    "  return out, cache\n",
    "```\n",
    "\n",
    "The backward pass will receive upstream derivatives and the `cache` object, and will return gradients with respect to the inputs and weights, like this:\n",
    "\n",
    "```python\n",
    "def layer_backward(dout, cache):\n",
    "  \"\"\"\n",
    "  Receive derivative of loss with respect to outputs and cache,\n",
    "  and compute derivative with respect to inputs.\n",
    "  \"\"\"\n",
    "  # Unpack cache values\n",
    "  x, w, z, out = cache\n",
    "  \n",
    "  # Use values in cache to compute derivatives\n",
    "  dx = # Derivative of loss with respect to x\n",
    "  dw = # Derivative of loss with respect to w\n",
    "  \n",
    "  return dx, dw\n",
    "```\n",
    "\n",
    "After implementing a bunch of layers this way, we will be able to easily combine them to build classifiers with different architectures.\n",
    "\n",
    "In addition to implementing fully-connected networks of arbitrary depth, we will also explore different update rules for optimization, and introduce Dropout as a regularizer and Batch Normalization as a tool to more efficiently optimize deep networks.\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The autoreload extension is already loaded. To reload it, use:\n",
      "  %reload_ext autoreload\n"
     ]
    }
   ],
   "source": [
    "# As usual, a bit of setup\n",
    "\n",
    "import time\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from cs231n.classifiers.fc_net import *\n",
    "from cs231n.data_utils import get_CIFAR10_data\n",
    "from cs231n.gradient_check import eval_numerical_gradient, eval_numerical_gradient_array\n",
    "from cs231n.solver import Solver\n",
    "\n",
    "%matplotlib inline\n",
    "plt.rcParams['figure.figsize'] = (10.0, 8.0) # set default size of plots\n",
    "plt.rcParams['image.interpolation'] = 'nearest'\n",
    "plt.rcParams['image.cmap'] = 'gray'\n",
    "\n",
    "# for auto-reloading external modules\n",
    "# see http://stackoverflow.com/questions/1907993/autoreload-of-modules-in-ipython\n",
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "def rel_error(x, y):\n",
    "  \"\"\" returns relative error \"\"\"\n",
    "  return np.max(np.abs(x - y) / (np.maximum(1e-8, np.abs(x) + np.abs(y))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Bruce**: [windows] If you need to execute a \"setup.py\" script and ran into \"error: Unable to find vcvarsall.bat\", try this: http://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_val:  (1000, 3, 32, 32)\n",
      "X_train:  (49000, 3, 32, 32)\n",
      "X_test:  (1000, 3, 32, 32)\n",
      "y_val:  (1000,)\n",
      "y_train:  (49000,)\n",
      "y_test:  (1000,)\n"
     ]
    }
   ],
   "source": [
    "# Load the (preprocessed) CIFAR10 data.\n",
    "\n",
    "data = get_CIFAR10_data()\n",
    "for k, v in data.iteritems():\n",
    "  print '%s: ' % k, v.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Affine layer: foward\n",
    "Open the file `cs231n/layers.py` and implement the `affine_forward` function.\n",
    "\n",
    "Once you are done you can test your implementaion by running the following:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing affine_forward function:\n",
      "difference:  9.76984772881e-10\n"
     ]
    }
   ],
   "source": [
    "# Test the affine_forward function\n",
    "\n",
    "num_inputs = 2\n",
    "input_shape = (4, 5, 6)\n",
    "output_dim = 3\n",
    "\n",
    "input_size = num_inputs * np.prod(input_shape)\n",
    "weight_size = output_dim * np.prod(input_shape)\n",
    "\n",
    "x = np.linspace(-0.1, 0.5, num=input_size).reshape(num_inputs, *input_shape)\n",
    "w = np.linspace(-0.2, 0.3, num=weight_size).reshape(np.prod(input_shape), output_dim)\n",
    "b = np.linspace(-0.3, 0.1, num=output_dim)\n",
    "\n",
    "out, _ = affine_forward(x, w, b)\n",
    "correct_out = np.array([[ 1.49834967,  1.70660132,  1.91485297],\n",
    "                        [ 3.25553199,  3.5141327,   3.77273342]])\n",
    "\n",
    "# Compare your output with ours. The error should be around 1e-9.\n",
    "print 'Testing affine_forward function:'\n",
    "print 'difference: ', rel_error(out, correct_out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Affine layer: backward\n",
    "Now implement the `affine_backward` function and test your implementation using numeric gradient checking."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing affine_backward function:\n",
      "dx error:  4.59433900095e-10\n",
      "dw error:  3.42948322913e-10\n",
      "db error:  2.93679325383e-11\n"
     ]
    }
   ],
   "source": [
    "# Test the affine_backward function\n",
    "\n",
    "x = np.random.randn(10, 2, 3)\n",
    "w = np.random.randn(6, 5)\n",
    "b = np.random.randn(5)\n",
    "dout = np.random.randn(10, 5)\n",
    "\n",
    "dx_num = eval_numerical_gradient_array(lambda x: affine_forward(x, w, b)[0], x, dout)\n",
    "dw_num = eval_numerical_gradient_array(lambda w: affine_forward(x, w, b)[0], w, dout)\n",
    "db_num = eval_numerical_gradient_array(lambda b: affine_forward(x, w, b)[0], b, dout)\n",
    "\n",
    "_, cache = affine_forward(x, w, b)\n",
    "dx, dw, db = affine_backward(dout, cache)\n",
    "\n",
    "# The error should be around 1e-10\n",
    "print 'Testing affine_backward function:'\n",
    "print 'dx error: ', rel_error(dx_num, dx)\n",
    "print 'dw error: ', rel_error(dw_num, dw)\n",
    "print 'db error: ', rel_error(db_num, db)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ReLU layer: forward\n",
    "Implement the forward pass for the ReLU activation function in the `relu_forward` function and test your implementation using the following:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing relu_forward function:\n",
      "difference:  4.99999979802e-08\n"
     ]
    }
   ],
   "source": [
    "# Test the relu_forward function\n",
    "\n",
    "x = np.linspace(-0.5, 0.5, num=12).reshape(3, 4)\n",
    "\n",
    "out, _ = relu_forward(x)\n",
    "correct_out = np.array([[ 0.,          0.,          0.,          0.,        ],\n",
    "                        [ 0.,          0.,          0.04545455,  0.13636364,],\n",
    "                        [ 0.22727273,  0.31818182,  0.40909091,  0.5,       ]])\n",
    "\n",
    "# Compare your output with ours. The error should be around 1e-8\n",
    "print 'Testing relu_forward function:'\n",
    "print 'difference: ', rel_error(out, correct_out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ReLU layer: backward\n",
    "Now implement the backward pass for the ReLU activation function in the `relu_backward` function and test your implementation using numeric gradient checking:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing relu_backward function:\n",
      "dx error:  3.27562692284e-12\n"
     ]
    }
   ],
   "source": [
    "x = np.random.randn(10, 10)\n",
    "dout = np.random.randn(*x.shape)\n",
    "\n",
    "dx_num = eval_numerical_gradient_array(lambda x: relu_forward(x)[0], x, dout)\n",
    "\n",
    "_, cache = relu_forward(x)\n",
    "dx = relu_backward(dout, cache)\n",
    "\n",
    "# The error should be around 1e-12\n",
    "print 'Testing relu_backward function:'\n",
    "print 'dx error: ', rel_error(dx_num, dx)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# \"Sandwich\" layers\n",
    "There are some common patterns of layers that are frequently used in neural nets. For example, affine layers are frequently followed by a ReLU nonlinearity. To make these common patterns easy, we define several convenience layers in the file `cs231n/layer_utils.py`.\n",
    "\n",
    "For now take a look at the `affine_relu_forward` and `affine_relu_backward` functions, and run the following to numerically gradient check the backward pass:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing affine_relu_forward:\n",
      "dx error:  4.54119875275e-11\n",
      "dw error:  1.01673304289e-09\n",
      "db error:  1.87070898032e-11\n"
     ]
    }
   ],
   "source": [
    "from cs231n.layer_utils import affine_relu_forward, affine_relu_backward\n",
    "\n",
    "x = np.random.randn(2, 3, 4)\n",
    "w = np.random.randn(12, 10)\n",
    "b = np.random.randn(10)\n",
    "dout = np.random.randn(2, 10)\n",
    "\n",
    "out, cache = affine_relu_forward(x, w, b)\n",
    "dx, dw, db = affine_relu_backward(dout, cache)\n",
    "\n",
    "dx_num = eval_numerical_gradient_array(lambda x: affine_relu_forward(x, w, b)[0], x, dout)\n",
    "dw_num = eval_numerical_gradient_array(lambda w: affine_relu_forward(x, w, b)[0], w, dout)\n",
    "db_num = eval_numerical_gradient_array(lambda b: affine_relu_forward(x, w, b)[0], b, dout)\n",
    "\n",
    "print 'Testing affine_relu_forward:'\n",
    "print 'dx error: ', rel_error(dx_num, dx)\n",
    "print 'dw error: ', rel_error(dw_num, dw)\n",
    "print 'db error: ', rel_error(db_num, db)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Loss layers: Softmax and SVM\n",
    "You implemented these loss functions in the last assignment, so we'll give them to you for free here. You should still make sure you understand how they work by looking at the implementations in `cs231n/layers.py`.\n",
    "\n",
    "You can make sure that the implementations are correct by running the following:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing svm_loss:\n",
      "loss:  9.00091368123\n",
      "dx error:  8.18289447289e-10\n",
      "\n",
      "Testing softmax_loss:\n",
      "loss:  2.3026769358\n",
      "dx error:  8.47818090096e-09\n"
     ]
    }
   ],
   "source": [
    "num_classes, num_inputs = 10, 50\n",
    "x = 0.001 * np.random.randn(num_inputs, num_classes)\n",
    "y = np.random.randint(num_classes, size=num_inputs)\n",
    "\n",
    "dx_num = eval_numerical_gradient(lambda x: svm_loss(x, y)[0], x, verbose=False)\n",
    "loss, dx = svm_loss(x, y)\n",
    "\n",
    "# Test svm_loss function. Loss should be around 9 and dx error should be 1e-9\n",
    "print 'Testing svm_loss:'\n",
    "print 'loss: ', loss\n",
    "print 'dx error: ', rel_error(dx_num, dx)\n",
    "\n",
    "dx_num = eval_numerical_gradient(lambda x: softmax_loss(x, y)[0], x, verbose=False)\n",
    "loss, dx = softmax_loss(x, y)\n",
    "\n",
    "# Test softmax_loss function. Loss should be 2.3 and dx error should be 1e-8\n",
    "print '\\nTesting softmax_loss:'\n",
    "print 'loss: ', loss\n",
    "print 'dx error: ', rel_error(dx_num, dx)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Two-layer network\n",
    "In the previous assignment you implemented a two-layer neural network in a single monolithic class. Now that you have implemented modular versions of the necessary layers, you will reimplement the two layer network using these modular implementations.\n",
    "\n",
    "Open the file `cs231n/classifiers/fc_net.py` and complete the implementation of the `TwoLayerNet` class. This class will serve as a model for the other networks you will implement in this assignment, so read through it to make sure you understand the API. You can run the cell below to test your implementation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing initialization ... \n",
      "Testing test-time forward pass ... \n",
      "Testing training loss (no regularization)\n",
      "Running numeric gradient check with reg =  0.0\n",
      "W1 relative error: 1.22e-08\n",
      "W2 relative error: 3.48e-10\n",
      "b1 relative error: 6.55e-09\n",
      "b2 relative error: 4.33e-10\n",
      "Running numeric gradient check with reg =  0.7\n",
      "W1 relative error: 8.18e-07\n",
      "W2 relative error: 7.98e-08\n",
      "b1 relative error: 1.09e-09\n",
      "b2 relative error: 9.09e-10\n"
     ]
    }
   ],
   "source": [
    "N, D, H, C = 3, 5, 50, 7\n",
    "X = np.random.randn(N, D)\n",
    "y = np.random.randint(C, size=N)\n",
    "\n",
    "std = 1e-2\n",
    "model = TwoLayerNet(input_dim=D, hidden_dim=H, num_classes=C, weight_scale=std)\n",
    "\n",
    "print 'Testing initialization ... '\n",
    "W1_std = abs(model.params['W1'].std() - std)\n",
    "b1 = model.params['b1']\n",
    "W2_std = abs(model.params['W2'].std() - std)\n",
    "b2 = model.params['b2']\n",
    "assert W1_std < std / 10, 'First layer weights do not seem right'\n",
    "assert np.all(b1 == 0), 'First layer biases do not seem right'\n",
    "assert W2_std < std / 10, 'Second layer weights do not seem right'\n",
    "assert np.all(b2 == 0), 'Second layer biases do not seem right'\n",
    "\n",
    "print 'Testing test-time forward pass ... '\n",
    "model.params['W1'] = np.linspace(-0.7, 0.3, num=D*H).reshape(D, H)\n",
    "model.params['b1'] = np.linspace(-0.1, 0.9, num=H)\n",
    "model.params['W2'] = np.linspace(-0.3, 0.4, num=H*C).reshape(H, C)\n",
    "model.params['b2'] = np.linspace(-0.9, 0.1, num=C)\n",
    "X = np.linspace(-5.5, 4.5, num=N*D).reshape(D, N).T\n",
    "scores = model.loss(X)\n",
    "correct_scores = np.asarray(\n",
    "  [[11.53165108,  12.2917344,   13.05181771,  13.81190102,  14.57198434, 15.33206765,  16.09215096],\n",
    "   [12.05769098,  12.74614105,  13.43459113,  14.1230412,   14.81149128, 15.49994135,  16.18839143],\n",
    "   [12.58373087,  13.20054771,  13.81736455,  14.43418138,  15.05099822, 15.66781506,  16.2846319 ]])\n",
    "\n",
    "scores_diff = np.abs(scores - correct_scores).sum()\n",
    "assert scores_diff < 1e-6, 'Problem with test-time forward pass'\n",
    "\n",
    "print 'Testing training loss (no regularization)'\n",
    "y = np.asarray([0, 5, 1])\n",
    "loss, grads = model.loss(X, y)\n",
    "correct_loss = 3.4702243556\n",
    "assert abs(loss - correct_loss) < 1e-10, 'Problem with training-time loss'\n",
    "\n",
    "model.reg = 1.0\n",
    "loss, grads = model.loss(X, y)\n",
    "correct_loss = 26.5948426952\n",
    "assert abs(loss - correct_loss) < 1e-10, 'Problem with regularization loss'\n",
    "\n",
    "for reg in [0.0, 0.7]:\n",
    "  print 'Running numeric gradient check with reg = ', reg\n",
    "  model.reg = reg\n",
    "  loss, grads = model.loss(X, y)\n",
    "\n",
    "  for name in sorted(grads):\n",
    "    f = lambda _: model.loss(X, y)[0]\n",
    "    grad_num = eval_numerical_gradient(f, model.params[name], verbose=False)\n",
    "    print '%s relative error: %.2e' % (name, rel_error(grad_num, grads[name]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Solver\n",
    "In the previous assignment, the logic for training models was coupled to the models themselves. Following a more modular design, for this assignment we have split the logic for training models into a separate class.\n",
    "\n",
    "Open the file `cs231n/solver.py` and read through it to familiarize yourself with the API. After doing so, use a `Solver` instance to train a `TwoLayerNet` that achieves at least `50%` accuracy on the validation set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(Iteration 1 / 2205) loss: 2.302457\n",
      "(Epoch 0 / 9) train acc: 0.116000; val_acc: 0.121000\n",
      "(Iteration 101 / 2205) loss: 1.767199\n",
      "(Iteration 201 / 2205) loss: 1.683542\n",
      "(Epoch 1 / 9) train acc: 0.427000; val_acc: 0.437000\n",
      "(Iteration 301 / 2205) loss: 1.610417\n",
      "(Iteration 401 / 2205) loss: 1.698023\n",
      "(Epoch 2 / 9) train acc: 0.496000; val_acc: 0.453000\n",
      "(Iteration 501 / 2205) loss: 1.456721\n",
      "(Iteration 601 / 2205) loss: 1.409622\n",
      "(Iteration 701 / 2205) loss: 1.406824\n",
      "(Epoch 3 / 9) train acc: 0.515000; val_acc: 0.479000\n",
      "(Iteration 801 / 2205) loss: 1.373044\n",
      "(Iteration 901 / 2205) loss: 1.372357\n",
      "(Epoch 4 / 9) train acc: 0.525000; val_acc: 0.489000\n",
      "(Iteration 1001 / 2205) loss: 1.318275\n",
      "(Iteration 1101 / 2205) loss: 1.295563\n",
      "(Iteration 1201 / 2205) loss: 1.356641\n",
      "(Epoch 5 / 9) train acc: 0.542000; val_acc: 0.489000\n",
      "(Iteration 1301 / 2205) loss: 1.328439\n",
      "(Iteration 1401 / 2205) loss: 1.178801\n",
      "(Epoch 6 / 9) train acc: 0.537000; val_acc: 0.502000\n",
      "(Iteration 1501 / 2205) loss: 1.253782\n",
      "(Iteration 1601 / 2205) loss: 1.169818\n",
      "(Iteration 1701 / 2205) loss: 1.253786\n",
      "(Epoch 7 / 9) train acc: 0.542000; val_acc: 0.500000\n",
      "(Iteration 1801 / 2205) loss: 1.232477\n",
      "(Iteration 1901 / 2205) loss: 1.210638\n",
      "(Epoch 8 / 9) train acc: 0.573000; val_acc: 0.501000\n",
      "(Iteration 2001 / 2205) loss: 1.265765\n",
      "(Iteration 2101 / 2205) loss: 1.036600\n",
      "(Iteration 2201 / 2205) loss: 1.143321\n",
      "(Epoch 9 / 9) train acc: 0.582000; val_acc: 0.510000\n"
     ]
    }
   ],
   "source": [
    "model = TwoLayerNet()\n",
    "solver = None\n",
    "\n",
    "##############################################################################\n",
    "# TODO: Use a Solver instance to train a TwoLayerNet that achieves at least  #\n",
    "# 50% accuracy on the validation set.                                        #\n",
    "##############################################################################\n",
    "solver = Solver(model, data,\n",
    "              update_rule='sgd',\n",
    "              optim_config={\n",
    "                'learning_rate': 1e-3,\n",
    "              },\n",
    "              lr_decay=0.95,\n",
    "              num_epochs=9, batch_size=200,\n",
    "              print_every=100)\n",
    "solver.train()\n",
    "##############################################################################\n",
    "#                             END OF YOUR CODE                               #\n",
    "##############################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x123fe3410>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Run this cell to visualize training loss and train / val accuracy\n",
    "\n",
    "plt.subplot(2, 1, 1)\n",
    "plt.title('Training loss')\n",
    "plt.plot(solver.loss_history, 'o')\n",
    "plt.xlabel('Iteration')\n",
    "\n",
    "plt.subplot(2, 1, 2)\n",
    "plt.title('Accuracy')\n",
    "plt.plot(solver.train_acc_history, '-o', label='train')\n",
    "plt.plot(solver.val_acc_history, '-o', label='val')\n",
    "plt.plot([0.5] * len(solver.val_acc_history), 'k--')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(loc='lower right')\n",
    "plt.gcf().set_size_inches(15, 12)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Multilayer network\n",
    "Next you will implement a fully-connected network with an arbitrary number of hidden layers.\n",
    "\n",
    "Read through the `FullyConnectedNet` class in the file `cs231n/classifiers/fc_net.py`.\n",
    "\n",
    "Implement the initialization, the forward pass, and the backward pass. For the moment don't worry about implementing dropout or batch normalization; we will add those features soon."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initial loss and gradient check"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a sanity check, run the following to check the initial loss and to gradient check the network both with and without regularization. Do the initial losses seem reasonable?\n",
    "\n",
    "For gradient checking, you should expect to see errors around 1e-6 or less."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running check with reg =  0\n",
      "Initial loss:  2.2961640972\n",
      "W1 relative error: 5.83e-07\n",
      "W2 relative error: 6.87e-07\n",
      "W3 relative error: 9.86e-08\n",
      "b1 relative error: 1.85e-07\n",
      "b2 relative error: 2.33e-09\n",
      "b3 relative error: 1.35e-10\n",
      "Running check with reg =  3.14\n",
      "Initial loss:  6.80655813571\n",
      "W1 relative error: 3.74e-08\n",
      "W2 relative error: 2.99e-08\n",
      "W3 relative error: 1.68e-08\n",
      "b1 relative error: 7.62e-07\n",
      "b2 relative error: 1.79e-08\n",
      "b3 relative error: 9.35e-11\n"
     ]
    }
   ],
   "source": [
    "N, D, H1, H2, C = 2, 15, 20, 30, 10\n",
    "X = np.random.randn(N, D)\n",
    "y = np.random.randint(C, size=(N,))\n",
    "\n",
    "for reg in [0, 3.14]:\n",
    "  print 'Running check with reg = ', reg\n",
    "  model = FullyConnectedNet([H1, H2], input_dim=D, num_classes=C,\n",
    "                            reg=reg, weight_scale=5e-2, dtype=np.float64)\n",
    "\n",
    "  loss, grads = model.loss(X, y)\n",
    "  print 'Initial loss: ', loss\n",
    "\n",
    "  for name in sorted(grads):\n",
    "    f = lambda _: model.loss(X, y)[0]\n",
    "    grad_num = eval_numerical_gradient(f, model.params[name], verbose=False, h=1e-5)\n",
    "    print '%s relative error: %.2e' % (name, rel_error(grad_num, grads[name]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As another sanity check, make sure you can overfit a small dataset of 50 images. First we will try a three-layer network with 100 units in each hidden layer. You will need to tweak the learning rate and initialization scale, but you should be able to overfit and achieve 100% training accuracy within 20 epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(Iteration 1 / 40) loss: 2.313735\n",
      "(Epoch 0 / 20) train acc: 0.360000; val_acc: 0.125000\n",
      "(Epoch 1 / 20) train acc: 0.360000; val_acc: 0.111000\n",
      "(Epoch 2 / 20) train acc: 0.440000; val_acc: 0.172000\n",
      "(Epoch 3 / 20) train acc: 0.600000; val_acc: 0.147000\n",
      "(Epoch 4 / 20) train acc: 0.600000; val_acc: 0.141000\n",
      "(Epoch 5 / 20) train acc: 0.640000; val_acc: 0.140000\n",
      "(Iteration 11 / 40) loss: 1.044620\n",
      "(Epoch 6 / 20) train acc: 0.760000; val_acc: 0.190000\n",
      "(Epoch 7 / 20) train acc: 0.880000; val_acc: 0.178000\n",
      "(Epoch 8 / 20) train acc: 0.880000; val_acc: 0.176000\n",
      "(Epoch 9 / 20) train acc: 0.920000; val_acc: 0.174000\n",
      "(Epoch 10 / 20) train acc: 0.980000; val_acc: 0.198000\n",
      "(Iteration 21 / 40) loss: 0.233588\n",
      "(Epoch 11 / 20) train acc: 0.960000; val_acc: 0.205000\n",
      "(Epoch 12 / 20) train acc: 0.980000; val_acc: 0.202000\n",
      "(Epoch 13 / 20) train acc: 0.940000; val_acc: 0.200000\n",
      "(Epoch 14 / 20) train acc: 1.000000; val_acc: 0.189000\n",
      "(Epoch 15 / 20) train acc: 0.960000; val_acc: 0.183000\n",
      "(Iteration 31 / 40) loss: 0.178345\n",
      "(Epoch 16 / 20) train acc: 1.000000; val_acc: 0.195000\n",
      "(Epoch 17 / 20) train acc: 1.000000; val_acc: 0.184000\n",
      "(Epoch 18 / 20) train acc: 1.000000; val_acc: 0.195000\n",
      "(Epoch 19 / 20) train acc: 0.980000; val_acc: 0.185000\n",
      "(Epoch 20 / 20) train acc: 0.960000; val_acc: 0.203000\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nGwDAVFmvh+wfD/m7b0zy4qp6a5Yn899t/hiTzIbkAGzVmoGstfbZC/ngqnpLkquTXFxVdyb5iSS7\nB5/9miRvz/KSF3dkedmLF1zI90FPNiQH4EKsu5flhWitPfc8r7ckLxrW98MorbchuUAGwPlsZOsk\n4DxsSA7AhRDIYBvYkByACyGQwTawITkAF2Joc8hgmtiQHIALIZDBNrEhOQBbZcgSAKAzgQwAoDOB\nDACgM4EMAKAzgQwAoDOBDACgM4EMAKAzgQwAoDOBDACgM4EMAKAzgQwAoDOBDACgM4EMAKAzgQwA\noDOBDACgM4EMAKAzgQwAoDOBDACgs4t6FwDT7MixhRw6eiInF5eyZ3Ym8/v35sC+ud5lATBiAhl0\ncuTYQg4ePp6lU6eTJAuLSzl4+HiSCGUAU8aQJXRy6OiJ+8PYiqVTp3Po6IlOFQHQi0AGnZxcXNpU\nOwA7l0AGneyZndlUOwA7l0AGnczv35uZ3bvOaJvZvSvz+/d2qgiAXkzqh05WJu67yxIAgQw6OrBv\nTgADwJAlAEBvAhkAQGcCGQBAZwIZAEBnAhkAQGcCGQBAZwIZAEBnAhkAQGcCGQBAZwIZAEBnAhkA\nQGcCGQBAZwIZAEBnAhkAQGcCGQBAZwIZAEBnAhkAQGcCGQBAZxf1LgDYOY4cW8ihoydycnEpe2Zn\nMr9/bw7sm+tdFsDYE8iAbXHk2EIOHj6epVOnkyQLi0s5ePh4kghlAOdhyBLYFoeOnrg/jK1YOnU6\nh46e6FQRwOQQyIBtcXJxaVPtADxAIAO2xZ7ZmU21A/AAgQzYFvP792Zm964z2mZ278r8/r2dKgKY\nHCb1A9tiZeK+uywBNk8gA7bNgX1zAhjAFhiyBADoTCADAOhMIAMA6EwgAwDoTCADAOhMIAMA6Ewg\nAwDozDpkMGGOHFuw+CrADiOQwQQ5cmwhBw8fz9Kp00mShcWlHDx8PEmEMoAJZsgSJsihoyfuD2Mr\nlk6dzqGjJzpVBMB2EMhggpxcXNpUOwCTwZAlTJA9szNZOEf42jM7s+3fZa4awOjoIYMJMr9/b2Z2\n7zqjbWb3rszv37ut37MyV21hcSktD8xVO3JsYVu/Z6uOHFvIVTfclMe+7Ldz1Q03jU1dAFslkMEE\nObBvLtdfe0XmZmdSSeZmZ3L9tVdse8/VOM9VG/ewCLAVhixhwhzYNzf0ocNxnqu2Xlg0pApMKj1k\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1242874d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Use a three-layer Net to overfit 50 training examples.\n",
    "\n",
    "num_train = 50\n",
    "small_data = {\n",
    "  'X_train': data['X_train'][:num_train],\n",
    "  'y_train': data['y_train'][:num_train],\n",
    "  'X_val': data['X_val'],\n",
    "  'y_val': data['y_val'],\n",
    "}\n",
    "\n",
    "weight_scale = 1e-2\n",
    "learning_rate = 1e-2 # was 1e-4\n",
    "model = FullyConnectedNet([100, 100],\n",
    "              weight_scale=weight_scale, dtype=np.float64)\n",
    "solver = Solver(model, small_data,\n",
    "                print_every=10, num_epochs=20, batch_size=25,\n",
    "                update_rule='sgd',\n",
    "                optim_config={\n",
    "                  'learning_rate': learning_rate,\n",
    "                }\n",
    "         )\n",
    "solver.train()\n",
    "\n",
    "plt.plot(solver.loss_history, 'o')\n",
    "plt.title('Training loss history')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Training loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now try to use a five-layer network with 100 units on each layer to overfit 50 training examples. Again you will have to adjust the learning rate and weight initialization, but you should be able to achieve 100% training accuracy within 20 epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(Iteration 1 / 40) loss: 2.414390\n",
      "(Epoch 0 / 20) train acc: 0.340000; val_acc: 0.114000\n",
      "(Epoch 1 / 20) train acc: 0.440000; val_acc: 0.132000\n",
      "(Epoch 2 / 20) train acc: 0.540000; val_acc: 0.122000\n",
      "(Epoch 3 / 20) train acc: 0.560000; val_acc: 0.151000\n",
      "(Epoch 4 / 20) train acc: 0.740000; val_acc: 0.148000\n",
      "(Epoch 5 / 20) train acc: 0.680000; val_acc: 0.172000\n",
      "(Iteration 11 / 40) loss: 1.100995\n",
      "(Epoch 6 / 20) train acc: 0.620000; val_acc: 0.173000\n",
      "(Epoch 7 / 20) train acc: 0.820000; val_acc: 0.144000\n",
      "(Epoch 8 / 20) train acc: 0.820000; val_acc: 0.163000\n",
      "(Epoch 9 / 20) train acc: 0.820000; val_acc: 0.161000\n",
      "(Epoch 10 / 20) train acc: 0.900000; val_acc: 0.191000\n",
      "(Iteration 21 / 40) loss: 0.388487\n",
      "(Epoch 11 / 20) train acc: 0.920000; val_acc: 0.176000\n",
      "(Epoch 12 / 20) train acc: 0.960000; val_acc: 0.162000\n",
      "(Epoch 13 / 20) train acc: 1.000000; val_acc: 0.169000\n",
      "(Epoch 14 / 20) train acc: 1.000000; val_acc: 0.177000\n",
      "(Epoch 15 / 20) train acc: 1.000000; val_acc: 0.170000\n",
      "(Iteration 31 / 40) loss: 0.061236\n",
      "(Epoch 16 / 20) train acc: 1.000000; val_acc: 0.171000\n",
      "(Epoch 17 / 20) train acc: 1.000000; val_acc: 0.167000\n",
      "(Epoch 18 / 20) train acc: 1.000000; val_acc: 0.176000\n",
      "(Epoch 19 / 20) train acc: 1.000000; val_acc: 0.179000\n",
      "(Epoch 20 / 20) train acc: 1.000000; val_acc: 0.176000\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nRK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x123f94050>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Use a five-layer Net to overfit 50 training examples.\n",
    "\n",
    "num_train = 50\n",
    "small_data = {\n",
    "  'X_train': data['X_train'][:num_train],\n",
    "  'y_train': data['y_train'][:num_train],\n",
    "  'X_val': data['X_val'],\n",
    "  'y_val': data['y_val'],\n",
    "}\n",
    "\n",
    "learning_rate = 0.021  # was 1e-3\n",
    "weight_scale = 0.036 # was 1e-5\n",
    "model = FullyConnectedNet([100, 100, 100, 100],\n",
    "                weight_scale=weight_scale, dtype=np.float64)\n",
    "solver = Solver(model, small_data,\n",
    "                print_every=10, num_epochs=20, batch_size=25,\n",
    "                update_rule='sgd',\n",
    "                optim_config={\n",
    "                  'learning_rate': learning_rate,\n",
    "                }\n",
    "         )\n",
    "solver.train()\n",
    "\n",
    "plt.plot(solver.loss_history, 'o')\n",
    "plt.title('Training loss history')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Training loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Inline question: \n",
    "Did you notice anything about the comparative difficulty of training the three-layer net vs training the five layer net?\n",
    "\n",
    "# Answer:\n",
    "**bruce**: Learning rate and weight scale needs to be more finely tuned in 5-layer neural net.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Update rules\n",
    "So far we have used vanilla stochastic gradient descent (SGD) as our update rule. More sophisticated update rules can make it easier to train deep networks. We will implement a few of the most commonly used update rules and compare them to vanilla SGD."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SGD+Momentum\n",
    "Stochastic gradient descent with momentum is a widely used update rule that tends to make deep networks converge faster than vanilla stochstic gradient descent.\n",
    "\n",
    "Open the file `cs231n/optim.py` and read the documentation at the top of the file to make sure you understand the API. Implement the SGD+momentum update rule in the function `sgd_momentum` and run the following to check your implementation. You should see errors less than 1e-8."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from cs231n.optim import sgd_momentum\n",
    "\n",
    "N, D = 4, 5\n",
    "w = np.linspace(-0.4, 0.6, num=N*D).reshape(N, D)\n",
    "dw = np.linspace(-0.6, 0.4, num=N*D).reshape(N, D)\n",
    "v = np.linspace(0.6, 0.9, num=N*D).reshape(N, D)\n",
    "\n",
    "config = {'learning_rate': 1e-3, 'velocity': v}\n",
    "next_w, _ = sgd_momentum(w, dw, config=config)\n",
    "\n",
    "expected_next_w = np.asarray([\n",
    "  [ 0.1406,      0.20738947,  0.27417895,  0.34096842,  0.40775789],\n",
    "  [ 0.47454737,  0.54133684,  0.60812632,  0.67491579,  0.74170526],\n",
    "  [ 0.80849474,  0.87528421,  0.94207368,  1.00886316,  1.07565263],\n",
    "  [ 1.14244211,  1.20923158,  1.27602105,  1.34281053,  1.4096    ]])\n",
    "expected_velocity = np.asarray([\n",
    "  [ 0.5406,      0.55475789,  0.56891579, 0.58307368,  0.59723158],\n",
    "  [ 0.61138947,  0.62554737,  0.63970526,  0.65386316,  0.66802105],\n",
    "  [ 0.68217895,  0.69633684,  0.71049474,  0.72465263,  0.73881053],\n",
    "  [ 0.75296842,  0.76712632,  0.78128421,  0.79544211,  0.8096    ]])\n",
    "\n",
    "print 'next_w error: ', rel_error(next_w, expected_next_w)\n",
    "print 'velocity error: ', rel_error(expected_velocity, config['velocity'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once you have done so, run the following to train a six-layer network with both SGD and SGD+momentum. You should see the SGD+momentum update rule converge faster."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "num_train = 4000\n",
    "small_data = {\n",
    "  'X_train': data['X_train'][:num_train],\n",
    "  'y_train': data['y_train'][:num_train],\n",
    "  'X_val': data['X_val'],\n",
    "  'y_val': data['y_val'],\n",
    "}\n",
    "\n",
    "solvers = {}\n",
    "\n",
    "for update_rule in ['sgd', 'sgd_momentum']:\n",
    "  print 'running with ', update_rule\n",
    "  model = FullyConnectedNet([100, 100, 100, 100, 100], weight_scale=5e-2)\n",
    "\n",
    "  solver = Solver(model, small_data,\n",
    "                  num_epochs=5, batch_size=100,\n",
    "                  update_rule=update_rule,\n",
    "                  optim_config={\n",
    "                    'learning_rate': 1e-2,\n",
    "                  },\n",
    "                  verbose=True)\n",
    "  solvers[update_rule] = solver\n",
    "  solver.train()\n",
    "  print\n",
    "\n",
    "plt.subplot(3, 1, 1)\n",
    "plt.title('Training loss')\n",
    "plt.xlabel('Iteration')\n",
    "\n",
    "plt.subplot(3, 1, 2)\n",
    "plt.title('Training accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "\n",
    "plt.subplot(3, 1, 3)\n",
    "plt.title('Validation accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "\n",
    "for update_rule, solver in solvers.iteritems():\n",
    "  plt.subplot(3, 1, 1)\n",
    "  plt.plot(solver.loss_history, 'o', label=update_rule)\n",
    "  \n",
    "  plt.subplot(3, 1, 2)\n",
    "  plt.plot(solver.train_acc_history, '-o', label=update_rule)\n",
    "\n",
    "  plt.subplot(3, 1, 3)\n",
    "  plt.plot(solver.val_acc_history, '-o', label=update_rule)\n",
    "  \n",
    "for i in [1, 2, 3]:\n",
    "  plt.subplot(3, 1, i)\n",
    "  plt.legend(loc='upper center', ncol=4)\n",
    "plt.gcf().set_size_inches(15, 15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RMSProp and Adam\n",
    "RMSProp [1] and Adam [2] are update rules that set per-parameter learning rates by using a running average of the second moments of gradients.\n",
    "\n",
    "In the file `cs231n/optim.py`, implement the RMSProp update rule in the `rmsprop` function and implement the Adam update rule in the `adam` function, and check your implementations using the tests below.\n",
    "\n",
    "[1] Tijmen Tieleman and Geoffrey Hinton. \"Lecture 6.5-rmsprop: Divide the gradient by a running average of its recent magnitude.\" COURSERA: Neural Networks for Machine Learning 4 (2012).\n",
    "\n",
    "[2] Diederik Kingma and Jimmy Ba, \"Adam: A Method for Stochastic Optimization\", ICLR 2015."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Test RMSProp implementation; you should see errors less than 1e-7\n",
    "from cs231n.optim import rmsprop\n",
    "\n",
    "N, D = 4, 5\n",
    "w = np.linspace(-0.4, 0.6, num=N*D).reshape(N, D)\n",
    "dw = np.linspace(-0.6, 0.4, num=N*D).reshape(N, D)\n",
    "cache = np.linspace(0.6, 0.9, num=N*D).reshape(N, D)\n",
    "\n",
    "config = {'learning_rate': 1e-2, 'cache': cache}\n",
    "next_w, _ = rmsprop(w, dw, config=config)\n",
    "\n",
    "expected_next_w = np.asarray([\n",
    "  [-0.39223849, -0.34037513, -0.28849239, -0.23659121, -0.18467247],\n",
    "  [-0.132737,   -0.08078555, -0.02881884,  0.02316247,  0.07515774],\n",
    "  [ 0.12716641,  0.17918792,  0.23122175,  0.28326742,  0.33532447],\n",
    "  [ 0.38739248,  0.43947102,  0.49155973,  0.54365823,  0.59576619]])\n",
    "expected_cache = np.asarray([\n",
    "  [ 0.5976,      0.6126277,   0.6277108,   0.64284931,  0.65804321],\n",
    "  [ 0.67329252,  0.68859723,  0.70395734,  0.71937285,  0.73484377],\n",
    "  [ 0.75037008,  0.7659518,   0.78158892,  0.79728144,  0.81302936],\n",
    "  [ 0.82883269,  0.84469141,  0.86060554,  0.87657507,  0.8926    ]])\n",
    "\n",
    "print 'next_w error: ', rel_error(expected_next_w, next_w)\n",
    "print 'cache error: ', rel_error(expected_cache, config['cache'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Test Adam implementation; you should see errors around 1e-7 or less\n",
    "from cs231n.optim import adam\n",
    "\n",
    "N, D = 4, 5\n",
    "w = np.linspace(-0.4, 0.6, num=N*D).reshape(N, D)\n",
    "dw = np.linspace(-0.6, 0.4, num=N*D).reshape(N, D)\n",
    "m = np.linspace(0.6, 0.9, num=N*D).reshape(N, D)\n",
    "v = np.linspace(0.7, 0.5, num=N*D).reshape(N, D)\n",
    "\n",
    "config = {'learning_rate': 1e-2, 'm': m, 'v': v, 't': 5}\n",
    "next_w, _ = adam(w, dw, config=config)\n",
    "\n",
    "expected_next_w = np.asarray([\n",
    "  [-0.40094747, -0.34836187, -0.29577703, -0.24319299, -0.19060977],\n",
    "  [-0.1380274,  -0.08544591, -0.03286534,  0.01971428,  0.0722929],\n",
    "  [ 0.1248705,   0.17744702,  0.23002243,  0.28259667,  0.33516969],\n",
    "  [ 0.38774145,  0.44031188,  0.49288093,  0.54544852,  0.59801459]])\n",
    "expected_v = np.asarray([\n",
    "  [ 0.69966,     0.68908382,  0.67851319,  0.66794809,  0.65738853,],\n",
    "  [ 0.64683452,  0.63628604,  0.6257431,   0.61520571,  0.60467385,],\n",
    "  [ 0.59414753,  0.58362676,  0.57311152,  0.56260183,  0.55209767,],\n",
    "  [ 0.54159906,  0.53110598,  0.52061845,  0.51013645,  0.49966,   ]])\n",
    "expected_m = np.asarray([\n",
    "  [ 0.48,        0.49947368,  0.51894737,  0.53842105,  0.55789474],\n",
    "  [ 0.57736842,  0.59684211,  0.61631579,  0.63578947,  0.65526316],\n",
    "  [ 0.67473684,  0.69421053,  0.71368421,  0.73315789,  0.75263158],\n",
    "  [ 0.77210526,  0.79157895,  0.81105263,  0.83052632,  0.85      ]])\n",
    "\n",
    "print 'next_w error: ', rel_error(expected_next_w, next_w)\n",
    "print 'v error: ', rel_error(expected_v, config['v'])\n",
    "print 'm error: ', rel_error(expected_m, config['m'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once you have debugged your RMSProp and Adam implementations, run the following to train a pair of deep networks using these new update rules:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "learning_rates = {'rmsprop': 1e-4, 'adam': 1e-3}\n",
    "for update_rule in ['adam', 'rmsprop']:\n",
    "  print 'running with ', update_rule\n",
    "  model = FullyConnectedNet([100, 100, 100, 100, 100], weight_scale=5e-2)\n",
    "\n",
    "  solver = Solver(model, small_data,\n",
    "                  num_epochs=5, batch_size=100,\n",
    "                  update_rule=update_rule,\n",
    "                  optim_config={\n",
    "                    'learning_rate': learning_rates[update_rule]\n",
    "                  },\n",
    "                  verbose=True)\n",
    "  solvers[update_rule] = solver\n",
    "  solver.train()\n",
    "  print\n",
    "\n",
    "plt.subplot(3, 1, 1)\n",
    "plt.title('Training loss')\n",
    "plt.xlabel('Iteration')\n",
    "\n",
    "plt.subplot(3, 1, 2)\n",
    "plt.title('Training accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "\n",
    "plt.subplot(3, 1, 3)\n",
    "plt.title('Validation accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "\n",
    "for update_rule, solver in solvers.iteritems():\n",
    "  plt.subplot(3, 1, 1)\n",
    "  plt.plot(solver.loss_history, 'o', label=update_rule)\n",
    "  \n",
    "  plt.subplot(3, 1, 2)\n",
    "  plt.plot(solver.train_acc_history, '-o', label=update_rule)\n",
    "\n",
    "  plt.subplot(3, 1, 3)\n",
    "  plt.plot(solver.val_acc_history, '-o', label=update_rule)\n",
    "  \n",
    "for i in [1, 2, 3]:\n",
    "  plt.subplot(3, 1, i)\n",
    "  plt.legend(loc='upper center', ncol=4)\n",
    "plt.gcf().set_size_inches(15, 15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train a good model!\n",
    "Train the best fully-connected model that you can on CIFAR-10, storing your best model in the `best_model` variable. We require you to get at least 50% accuracy on the validation set using a fully-connected net.\n",
    "\n",
    "If you are careful it should be possible to get accuracies above 55%, but we don't require it for this part and won't assign extra credit for doing so. Later in the assignment we will ask you to train the best convolutional network that you can on CIFAR-10, and we would prefer that you spend your effort working on convolutional nets rather than fully-connected nets.\n",
    "\n",
    "You might find it useful to complete the `BatchNormalization.ipynb` and `Dropout.ipynb` notebooks before completing this part, since those techniques can help you train powerful models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "best_model = None\n",
    "################################################################################\n",
    "# TODO: Train the best FullyConnectedNet that you can on CIFAR-10. You might   #\n",
    "# batch normalization and dropout useful. Store your best model in the         #\n",
    "# best_model variable.                                                         #\n",
    "################################################################################\n",
    "weight_scale = 5e-2\n",
    "learning_rate = 1e-3 \n",
    "model = FullyConnectedNet([100, 75, 50, 25],\n",
    "              weight_scale=weight_scale, dtype=np.float64)\n",
    "solver = Solver(model, data,\n",
    "                print_every=100, num_epochs=5, batch_size=200,\n",
    "                update_rule='adam',\n",
    "                optim_config={\n",
    "                  'learning_rate': learning_rate,\n",
    "                }\n",
    "         )\n",
    "solver.train()\n",
    "\n",
    "# accuracy is about 51%. \n",
    "best_model = model \n",
    "################################################################################\n",
    "#                              END OF YOUR CODE                                #\n",
    "################################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "plt.plot(solver.loss_history, 'o')\n",
    "plt.title('Training loss history')\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Training loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Test you model\n",
    "Run your best model on the validation and test sets. You should achieve above 50% accuracy on the validation set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# place missing variables:\n",
    "X_test, X_val, y_test, y_val = data['X_test'], data['X_val'], data['y_test'], data['y_val']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "y_test_pred = np.argmax(best_model.loss(X_test), axis=1)\n",
    "y_val_pred = np.argmax(best_model.loss(X_val), axis=1)\n",
    "print 'Validation set accuracy: ', (y_val_pred == y_val).mean()\n",
    "print 'Test set accuracy: ', (y_test_pred == y_test).mean()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
